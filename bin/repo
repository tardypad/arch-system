#!/bin/sh
# commands used:
# - git
# - mktemp
# - repo-add
# - repo-remove
# - scp

init_variables() {
  COMMAND=${0##*/}

  TMP_DIR="$( TMPDIR='/var/tmp' mktemp -d )"
  trap 'rm -rf "${TMP_DIR}"' EXIT

  AUR_URL='https://aur.archlinux.org'
  SRV_DIR='/usr/local/www'

  REPO=
  ACTION=
  PACKAGE=
  TOOL_OPTIONS=
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>] <repo> (add|remove|sync) (package_file|package_name) [<tool options>...]

	Manage personal remote repository packages

	Options:
	  -h    show this message only
	EOF
}

parse_command_line() {
  while getopts h OPT; do
    case "${OPT}" in
      h) show_usage; exit 0 ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  REPO="$1"
  ACTION="$2"
  PACKAGE="$3"

  shift 3 2> /dev/null
  TOOL_OPTIONS="$*"
}

validate_command_line() {
  if [ -z "${REPO}" ]; then
    exit_error 'missing repo operand'
  fi

  if [ "${REPO}" != 'aur' ] \
    && [ "${REPO}" != 'tardypad' ]; then
    exit_error "invalid repo '${REPO}'"
  fi

  if [ -z "${ACTION}" ]; then
    exit_error 'missing action operand'
  fi

  if [ "${ACTION}" != 'add' ] \
    && [ "${ACTION}" != 'remove' ] \
    && [ "${ACTION}" != 'sync' ]; then
    exit_error "invalid action '${ACTION}'"
  fi

  if [ -z "${PACKAGE}" ]; then
    exit_error 'missing package operand'
  fi

  if [ "${ACTION}" = 'add' ] && [ ! -f "${PACKAGE}" ]; then
    exit_error "invalid package file '${PACKAGE}'"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2

import_env() {
  scp -q "chestnut:/${SRV_DIR}/pkgs/${REPO}/${REPO}.files.tar.xz" "${TMP_DIR}"
  scp -q "chestnut:/${SRV_DIR}/pkgs/${REPO}/${REPO}.db.tar.xz" "${TMP_DIR}"
  ln -s "${TMP_DIR}/${REPO}.files.tar.xz" "${TMP_DIR}/${REPO}.files"
  ln -s "${TMP_DIR}/${REPO}.db.tar.xz" "${TMP_DIR}/${REPO}.db"
}

export_env() {
  scp -q "${TMP_DIR}"/*.tar.xz "chestnut:/${SRV_DIR}/pkgs/${REPO}/"
  scp -q "${TMP_DIR}"/*.tar.zst "chestnut:/${SRV_DIR}/pkgs/${REPO}/" 2> /dev/null

  if [ "${ACTION}" = 'add' ]; then
    scp -q "${PACKAGE}" "chestnut:/${SRV_DIR}/pkgs/${REPO}/"
  fi
}

add_package() {
  repo-add ${TOOL_OPTIONS} "${TMP_DIR}/${REPO}.db.tar.xz" "${PACKAGE}"
}

remove_package() {
  repo-remove ${TOOL_OPTIONS} "${TMP_DIR}/${REPO}.db.tar.xz" "${PACKAGE}"
}

sync_package() (
    cd "${TMP_DIR}" || exit
    git clone -q "${AUR_URL}/${PACKAGE}" "${PACKAGE}"
    printf '%s %s\n' 'Review the package' "${TMP_DIR}/${PACKAGE}/PKGBUILD"
    printf '%s\n' 'Press Return to continue, Ctrl-c to abort'
    read -r

    cd "${PACKAGE}" || exit
    PKGDEST="${TMP_DIR}" makepkg --noconfirm --syncdeps --rmdeps --clean ${TOOL_OPTIONS}
    repo-add ../"${REPO}.db.tar.xz" ../"${PACKAGE}"*.tar.zst
)

init_variables
parse_command_line "$@"
validate_command_line

import_env \
&& "${ACTION}_package" \
&& export_env

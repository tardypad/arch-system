#!/bin/sh
# commands used:
# - column
# - curl
# - git
# - jq
# - mktemp
# - pacman
# - pacman-conf
# - vercmp

init_variables() {
  COMMAND=${0##*/}

  TMP_DIR="$( mktemp -d )"
  trap 'rm -rf "${TMP_DIR}"' EXIT

  AUR_URL='https://aur.archlinux.org'

  TYPE='all'
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>]

	List updatable build packages

	Need to be run from repository root folder

	Options:
	  -g    list only git packages
	  -h    show this message only
	  -v    list only versioned packages
	EOF
}

parse_command_line() {
  while getopts ghv OPT; do
    case "${OPT}" in
      g) TYPE='git' ;;
      h) show_usage; exit 0 ;;
      v) TYPE='versioned' ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  echo "Try '${COMMAND} -h' for more information."
  exit 1
} >&2

list_aur_updates() {
  IGNORED_PACKAGES=$( pacman-conf IgnorePkg )

  pacman -Sl aur \
    | grep -vE "^($( echo "${IGNORED_PACKAGES}" | tr '\n' '|' )):" \
    | grep -v '\-git ' \
    | while read -r LINE; do
        PACKAGE="$( echo "${LINE}" | cut -d' ' -f2 )"
        CURRENT_VERSION="$( echo "${LINE}" | cut -d' ' -f3 )"

        NEW_VERSION="$(
          curl -s "${AUR_URL}/rpc?v=5&type=info&arg[]=${PACKAGE}" \
            | jq -r '.results[0].Version'
        )"

        printf '%s\t%s\t%s\n' "${PACKAGE}" "${CURRENT_VERSION}" "${NEW_VERSION}"
      done
}

get_package_new_version() (
  cd "${TMP_DIR}/$1" || exit

  . ./PKGBUILD

  SOURCE_URL="$( echo "${source}" | sed -e 's/.*\(https:.*\)$/\1/' )"
  SOURCE_DIR="$( echo "${source}" | sed -n 's/\(.*\)::.*/\1/p' )"
  if [ -z "${SOURCE_DIR}" ]; then
    SOURCE_DIR="$( echo "${source}" | sed -e 's|.*/\([^/]*\)|\1|' -e 's/\.git$//' )"
  fi

  git clone -q --bare "${SOURCE_URL}" "${SOURCE_DIR}"

  pkgver
)

list_aur_git_updates() {
  pacman -Sl aur \
    | grep '\-git ' \
    | while read -r LINE; do
        PACKAGE="$( echo "${LINE}" | cut -d' ' -f2 )"
        CURRENT_VERSION="$( echo "${LINE}" | cut -d' ' -f3 | sed 's/-[0-9]*//' )"

        git clone -q "${AUR_URL}/${PACKAGE}" "${TMP_DIR}/${PACKAGE}"

        NEW_VERSION="$( get_package_new_version "${PACKAGE}" )"
        printf '%s\t%s\t%s\n' "${PACKAGE}" "${CURRENT_VERSION}" "${NEW_VERSION}"
      done
}

list_tardypad_git_updates() {
  pacman -Sl tardypad \
    | grep '\-git ' \
    | grep -v 'dotfiles' \
    | while read -r LINE; do
        PACKAGE="$( echo "${LINE}" | cut -d' ' -f2 )"
        CURRENT_VERSION="$( echo "${LINE}" | cut -d' ' -f3 | sed 's/-[0-9]*//' )"

        mkdir -p "${TMP_DIR}/${PACKAGE}"
        cp "builds/${PACKAGE}/PKGBUILD" "${TMP_DIR}/${PACKAGE}"

        NEW_VERSION="$( get_package_new_version "${PACKAGE}" )"
        printf '%s\t%s\t%s\n' "${PACKAGE}" "${CURRENT_VERSION}" "${NEW_VERSION}"
      done
}

list_updates() {
  case "${TYPE}" in
    all)
      list_aur_updates
      list_aur_git_updates
      list_tardypad_git_updates
      ;;
    git)
      list_aur_git_updates
      list_tardypad_git_updates
      ;;
    versioned)
      list_aur_updates
      ;;
  esac \
    | while read -r LINE; do
        CURRENT_VERSION="$( echo "${LINE}" | cut -f2 )"
        NEW_VERSION="$( echo "${LINE}" | cut -f3 )"

        if [ "$( vercmp "${NEW_VERSION}" "${CURRENT_VERSION}" )" = 1 ]; then
          echo "${LINE}"
        fi
      done \
    | sort \
    | column -t
}

init_variables
parse_command_line "$@"

list_updates

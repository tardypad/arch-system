#!/bin/sh
# commands used:
# - lxc

init_variables() {
  COMMAND=${0##*/}

  CONTAINER_NAME='arch-builds'
  AUR_URL='https://aur.archlinux.org'

  REMOVE=false
  SYNC=true

  REPO_NAME=
  PACKAGE=
}

show_usage() {
  cat <<- EOF
	usage: ${COMMAND} [<options>] <repo> <package_name>

	Build and sync package to remote repository

	Options:
	-b    build only
	-h    show this message only
	-r    remove package from repository
EOF
}

parse_command_line() {
  while getopts bhr OPT; do
    case "${OPT}" in
      b) SYNC=false ;;
      h) show_usage; exit 0 ;;
      r) REMOVE=true ;;
      ?) exit_error ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  REPO_NAME="$1"
  PACKAGE="$2"
}

validate_command_line() {
  if [ -z "${REPO_NAME}" ]; then
    exit_error 'missing repo operand'
  fi

  if [ "${REPO_NAME}" != 'aur' ] \
    && [ "${REPO_NAME}" != 'tardypad' ]; then
    exit_error "invalid repo '${REPO_NAME}'"
  fi

  if [ -z "${PACKAGE}" ]; then
    exit_error 'missing package operand'
  fi

  if [ "${REPO_NAME}" = 'tardypad' ] \
    && [ "${REMOVE}" = 'false' ] \
    && [ ! -d "builds/${PACKAGE}" ]; then
    exit_error "Package '${PACKAGE}' does not exist"
  fi
}

exit_error() {
  [ -z "$1" ] || echo "${COMMAND}: $1"
  exit 1
} >&2


build() {
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "cd $1 && makepkg --noconfirm --syncdeps --rmdeps --clean --force && makepkg --printsrcinfo > .SRCINFO" damien
}

build_tardypad() {
  build "/home/damien/builds/${PACKAGE}"
}

build_aur() {
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "rm -rf /var/tmp/sync-${PACKAGE} && git clone ${AUR_URL}/${PACKAGE} /var/tmp/sync-${PACKAGE}" damien

  printf '%s\n' 'Review the package build'
  printf "lxc exec %s -- vi %s\n" "${CONTAINER_NAME}" "/var/tmp/sync-${PACKAGE}/PKGBUILD"
  printf '%s\n' 'Press Return to continue, Ctrl-c to abort'
  read -r

  build "/var/tmp/sync-${PACKAGE}"
}

add_package() {
  PACKAGE_PREFIX="$( echo "${PACKAGE}" | sed 's/-git$//' )"
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "repo-add /home/damien/packages/${REPO_NAME}.db.tar.xz /home/damien/packages/${PACKAGE_PREFIX}*" damien
}

remove_package() {
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "repo-remove /home/damien/packages/${REPO_NAME}.db.tar.xz ${PACKAGE}" damien
}

import_env() {
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "rm -rf /home/damien/packages && rsync -azh --mkpath 'chestnut:/srv/http/pkgs/arch/${REPO_NAME}/${REPO_NAME}.*' /home/damien/packages" damien
}

export_env() {
  lxc exec "${CONTAINER_NAME}" -- \
    su -lc "rsync -azh /home/damien/packages/ chestnut:/srv/http/pkgs/arch/${REPO_NAME}" damien
}

init_variables
parse_command_line "$@"
validate_command_line

if [ "${REMOVE}" = 'true' ]; then
  import_env && remove_package && export_env
  exit
fi

if [ "${SYNC}" = 'false' ]; then
  "build_${REPO_NAME}"
else
  import_env && "build_${REPO_NAME}" && add_package && export_env
fi
